

/* (인텔리제이 플러그인 관리가 아님) 해당 프로젝트의 의존성 관리를 위한 설정이다. */
buildscript {
    /* build.gradle에서 사용하는 전역변수를 설정하겠다는 의미이다. */
    ext {
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

/* 앞서 선언한 플러그인 의존성들을 적용할 것인지를 결정하는 코드 */
/* java와 springboot를 사용하기 위해서 필수적으로 사용해야하는 플러그인들이다. */
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
/* springboot의 dependency들을 관리해주는 플러그인 */
apply plugin: 'io.spring.dependency-management'

group 'com.myproject.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

/* repositories는 각종 의존성(라이브러리)들을 어떤 원격 저장소에서 받을지를 정한다.
* 기본적으로 mavaenCentral을 많이 사용하지만, 최근에는 라이브러리 업로드 난이도 때문에 jcenter도 많이 사용한다.
* mavenCentral은 이전부터 많이 사용하는 저장소이지만, 본인이 만든 라이브러리를 업로드하기 위해서는 많은 과정과 설정이 필요하다.
* jcenter는 이러한 문제점을 개선하고, jcenter에 라이브러리를 업로드하면 mavenCenter에도 업로드될수 있도록 자동화 할 수 있다. */
repositories {
    mavenCentral()
    jcenter()
}

/* 프로젝트 개발에 필요한 의존성 선언부이다. 인텔리제이는 메이븐 저장소의 데이터를 인덱싱해서 관리하기 때문에 커뮤티니 버전을 사용하더라도
* 의존성 자동완성이 가능하다. 다만, 특정 버전을 명시하면 안 된다. 버전을 명시하지 않아야만 맨 위에서 작성한
* org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion} 의 버전을 따라가게 된다.. */
dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}





